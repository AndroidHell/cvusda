import cv2
import numpy as np
import os
import csv

def testwrite(img,year,doy,plot, pfx):
    oname = "../../pics/{}/{}/{}{}.JPG".format(year,doy,pfx,plot) 
    retval=cv2.imwrite(oname,img)
    print "Wrote ", oname, retval        

def testread(year,doy,plot):
    imname = "../../pics/{}/{}/{}.JPG".format(year,doy,plot) 
    img = cv2.imread(imname)
    if img==None:
        imname = "../../pics/{}/{}/{}.jpg".format(year,doy,plot)
        img = cv2.imread(imname)
    if img==None:
        imname = "../../pics/{}/{}/P{}.JPG".format(year,doy,plot)
        img = cv2.imread(imname)
    if img==None:
        imname = "../../pics/{}/{}/p{}.JPG".format(year,doy,plot)
        img = cv2.imread(imname)
    if img != None:
        print "Read ", imname
    return img

def nothing(x):
    pass

def normalize(x):
    y=(x-np.min(x))/(np.max(x)-np.min(x))*255
    return y

def opening_adjust(mat):

    kernel =  cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(5,5))

    cv2.namedWindow('open')
    opening = cv2.morphologyEx(mat, cv2.MORPH_OPEN, kernel)
    cv2.createTrackbar('n','open',0,50,nothing)
    while(1):
        cv2.imshow('open',opening)
        k = cv2.waitKey(1) & 0xFF
        if k == 27:
            break

        n = cv2.getTrackbarPos('n','open')
        kernel =  cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(2*n+1,2*n+1))
        opening = cv2.morphologyEx(mat, cv2.MORPH_OPEN, kernel)

    cv2.destroyAllWindows()

    return opening, n


def floodFill_adjust(mat,thresholdType,adaptiveMethod):
    C = 0
    blockSize = 7
    blockSize = 2*blockSize+1
    rows,cols = np.shape(mat)
    maxBS=int(np.sqrt(float(rows*cols)/2))
    at = cv2.adaptiveThreshold(mat,255,adaptiveMethod, thresholdType,blockSize,C)
    cv2.namedWindow('thresh')
    cv2.createTrackbar('C','thresh',0,255,nothing)
    cv2.createTrackbar('blockSize','thresh',1,maxBS,nothing)
    while(1):
        cv2.imshow('thresh',at)
        k = cv2.waitKey(1) & 0xFF
        if k == 27:
            break

        C = cv2.getTrackbarPos('C','thresh')-127
        blockSize = cv2.getTrackbarPos('blockSize','thresh')
        blockSize = max(3,2*blockSize+1)
        
        at = cv2.adaptiveThreshold(mat,255,adaptiveMethod, thresholdType,blockSize,C)

    cv2.destroyAllWindows()

    return at, C, blockSize


def adaptive_thresh_adjust(mat,thresholdType,adaptiveMethod):
    C = 0
    blockSize = 7
    blockSize = 2*blockSize+1
    rows,cols = np.shape(mat)
    maxBS=int(np.sqrt(float(rows*cols)/2))
    at = cv2.adaptiveThreshold(mat,255,adaptiveMethod, thresholdType,blockSize,C)
    cv2.namedWindow('thresh')
    cv2.createTrackbar('C','thresh',0,255,nothing)
    cv2.createTrackbar('blockSize','thresh',1,maxBS,nothing)
    while(1):
        cv2.imshow('thresh',at)
        k = cv2.waitKey(1) & 0xFF
        if k == 27:
            break

        C = cv2.getTrackbarPos('C','thresh')-127
        blockSize = cv2.getTrackbarPos('blockSize','thresh')
        blockSize = max(3,2*blockSize+1)
        
        at = cv2.adaptiveThreshold(mat,255,adaptiveMethod, thresholdType,blockSize,C)

    cv2.destroyAllWindows()

    return at, C, blockSize
    

blockSize = 151
C = 0
hblockSize = blockSize
hC = C
vblockSize = blockSize
vC = C

for year in range(2012,2013):
    treatfile='../../pics/{}/treatments{}cotton.csv'.format(year,year)
    with open(treatfile, 'rb') as fi:
        reader = csv.reader(fi)
        for row in reader:
            plot = int(row[0])
            sector = int(row[1])
            doy = int(row[2])
            block = int(row[3])  
            water = int(row[4])
            img=testread(year,doy,plot)
            if img==None:
                pass
            else:
                img=cv2.pyrDown(cv2.pyrDown(img))
                hsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)
                h,s,v=cv2.split(hsv)
                vt = cv2.adaptiveThreshold(v,1,cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY,vblockSize,vC)
                litfrac = float(np.sum(vt>0))/float(np.size(vt))
                print litfrac

                img2 = img.copy()
                img3 = img.copy()

                contours, hierarchy = cv2.findContours(vt,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
                nn=np.size(contours)
                cx = np.zeros([nn,1])
                cy = np.zeros([nn,1])
                for i in range(0,nn):
                    cv2.drawContours(img2, contours, i, (0,0,255), 1)
                    M = cv2.moments(contours[i])
                    if M['m00']==0:
                        cx[i] = None
                        cy[i] = None
                    else:
                        cx[i] = int(M['m10']/M['m00'])
                        cy[i] = int(M['m01']/M['m00']) 
    
                testwrite(img2,year,doy,plot, "VAT_")

                ht = cv2.adaptiveThreshold(h,1,cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY_INV,hblockSize,hC)
                vegfrac = float(np.sum(ht>0))/float(np.size(ht))
                print vegfrac

                contours, hierarchy = cv2.findContours(ht,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
                nn=np.size(contours)
                cx = np.zeros([nn,1])
                cy = np.zeros([nn,1])
                for i in range(0,nn):
                    cv2.drawContours(img3, contours, i, (0,255,0), 1)
                    M = cv2.moments(contours[i])
                    if M['m00']==0:
                        cx[i] = None
                        cy[i] = None
                    else:
                        cx[i] = int(M['m10']/M['m00'])
                        cy[i] = int(M['m01']/M['m00']) 

                testwrite(img3,year,doy,plot, "HAT_")
